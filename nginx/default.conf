   lua_package_path '/usr/local/openresty/lualib/?.lua;;';
   resolver 127.0.0.11 ipv6=on;

    # cache for discovery metadata documents
    lua_shared_dict discovery 1m;
    # cache for JWKs
    lua_shared_dict jwks 1m;

    lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.pem;
    lua_ssl_verify_depth 5;


    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }
	
    server { # simple reverse-proxy
      listen       9432 ssl default_server;
	  
	  server_tokens off;
      # listen [::]:9432 ssl default_server;

      ssl_certificate      /etc/nginx/cert/aida.crt;
      ssl_certificate_key  /etc/nginx/cert/aida.key;
      ssl_protocols       TLSv1.1 TLSv1.2;

      ssl_session_cache    shared:SSL:5m;
      ssl_session_timeout  5m;
	  
	  proxy_buffers         8 16k;  # Buffer pool = 8 buffers of 16k
      proxy_buffer_size     16k;    # 16k of buffers from pool used for headers

      ssl_ciphers  HIGH:!aNULL:!MD5;
      ssl_prefer_server_ciphers  on;

      proxy_read_timeout 86400s;
      proxy_send_timeout 86400s;
      
      set $session_storage cookie;
      location / {
	      proxy_pass      ${UI_URL};
		add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-Port  $requested_port;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host; 
      }
	  
      location = /api/auth/silentSSO/ {
		proxy_pass      ${UI_URL}/api/auth/silentSSO/;
		add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-Port  $requested_port;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host; 
	  }

	  location = /api/jwt {
                proxy_pass https://aida-ui:9000/api/jwt/;
                add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto https;
                proxy_set_header X-Forwarded-Port $requested_port;
                proxy_set_header X-Forwarded-Host $host;
                proxy_set_header X-Forwarded-Server $host;
                }

      location = /predictedJobHistory/ {
		
		  access_by_lua '
		  
			local opts = {
				secret= os.getenv("DWC_PUBLIC_KEY")
			}
			local opts2 = {
			introspection_endpoint=os.getenv("KEYCLOAK_URL").."/keycloak/auth/realms/aida/protocol/openid-connect/token/introspect",
			client_id = "nginx",
			ssl_verify = "no"
			}
			-- call instrospect
			local res, err = require("resty.openidc").bearer_jwt_verify(opts)
			if err or not res then
				local res2, err2 = require("resty.openidc").introspect(opts2)
				if err2 or not res2 then
					ngx.status = 403
					ngx.say(err and err or "No access_token provided")
					ngx.exit(ngx.HTTP_FORBIDDEN)
				end
			end
          ';
	      proxy_pass      ${PROPHET_URL}/predictedJobHistory;
		  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto https;
      }

	  location = /api/jwt/create-session {
		access_by_lua '
		  
			local opts = {
				secret= os.getenv("DWC_PUBLIC_KEY")
			}
			-- call instrospect
			local res, err = require("resty.openidc").bearer_jwt_verify(opts)
			if err or not res then
				ngx.status = 403
				ngx.say(err and err or "No access_token provided")
				ngx.exit(ngx.HTTP_FORBIDDEN)
			end
          ';
		  proxy_pass      ${UI_URL}/api/jwt/create-session;
		  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto https;
	  }

	  location /api/ {
		  access_by_lua '
		  	  local opts = {
				secret= os.getenv("DWC_PUBLIC_KEY")
			  }
			  local opts2 = {
			   redirect_uri_path = "/api/redirect_uri",
			   accept_none_alg = true,
			   ssl_verify = "no",
			   discovery = "https://"..ngx.var.http_host.."/keycloak/auth/realms/aida/.well-known/openid-configuration",
			   client_id = "nginx",
			   redirect_uri_scheme = "https",
			   logout_path = "/logout",
			   redirect_after_logout_uri = "https://"..ngx.var.http_host.."/keycloak/auth/realms/aida/protocol/openid-connect/logout?redirect_uri=https://"..ngx.var.http_host.."/",
			   redirect_after_logout_with_id_token_hint = false,
			   session_contents = {id_token=true}
			 }
			 -- call introspect for OAuth 2.0 Bearer Access Token validation
			local res, err = require("resty.openidc").bearer_jwt_verify(opts)
			if err or not res then
				local res2, err2 = require("resty.openidc").authenticate(opts2)
				if err2 then
				ngx.status = 403
				ngx.say(err2)
				ngx.exit(ngx.HTTP_FORBIDDEN)
				end
			end
		  ';
		proxy_pass  ${UI_URL}/api/;
		add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-Port  $requested_port;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
	  }

set $requested_port '';
 access_by_lua '
 local port
 if string.find(ngx.var.http_host, ":") then
 ngx.var.requested_port = string.match(ngx.var.http_host, ":(.*)")
 else
 ngx.var.requested_port = ngx.var.server_port
 end
 ';

      location /keycloak {
        proxy_pass ${KEYCLOAK_URL};
		add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-Port  $requested_port;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host; 
      }
    }
